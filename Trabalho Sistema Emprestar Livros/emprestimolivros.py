# -*- coding: utf-8 -*-
"""EmprestimoLivros.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15C7ylcjyjhGknGfCLhn4LxFFXl9ubL5r
"""

# Sistema de Empréstimo de Livros


# 1) Listas iniciais de usuários
usuarios = [
    {"tipo": "aluno", "matricula": "A001", "historico_emprestimos": []},
    {"tipo": "professor", "matricula": "P001", "historico_emprestimos": []},
    {"tipo": "funcionario", "matricula": "F001", "historico_emprestimos": []}
]

# 2) Lista inicial de livros
livros = [
    {"isbn": "12345", "titulo": "Python para Iniciantes", "disponivel": True, "localizacao": "Estante A", "prazo_devolucao": None},
    {"isbn": "67890", "titulo": "Modelagem e Simulação", "disponivel": True, "localizacao": "Estante B", "prazo_devolucao": None}
]

# 3) Lista inicial de bibliotecários
bibliotecarios = [
    {"nome": "Maria", "turno": "manhã", "especializacao": "Catalogação"},
    {"nome": "João", "turno": "tarde", "especializacao": "Atendimento ao Público"}
]

# 4) Dicionário para empréstimos ativos
emprestimos_ativos = {}



# Funções principais


def encontrar_usuario(matricula):
    for usuario in usuarios:
        if usuario["matricula"] == matricula:
            return usuario
    return None

def encontrar_livro(isbn):
    for livro in livros:
        if livro["isbn"] == isbn:
            return livro
    return None

def emprestar_livro(matricula_usuario, isbn_livro):
    usuario = encontrar_usuario(matricula_usuario)
    livro = encontrar_livro(isbn_livro)

    if usuario is None:
        print(f"Usuário com matrícula {matricula_usuario} não encontrado.")
        return

    if livro is None:
        print(f"Livro com ISBN {isbn_livro} não encontrado.")
        return

    if not livro["disponivel"]:
        print(f"Livro '{livro['titulo']}' não está disponível no momento.")
        return

    # Atualizando dados
    livro["disponivel"] = False
    usuario["historico_emprestimos"].append(isbn_livro)
    emprestimos_ativos[isbn_livro] = matricula_usuario

    print(f"Livro '{livro['titulo']}' emprestado para {usuario['tipo']} {matricula_usuario}")

def devolver_livro(matricula_usuario, isbn_livro):
    usuario = encontrar_usuario(matricula_usuario)
    livro = encontrar_livro(isbn_livro)

    if usuario is None or livro is None:
        print("Usuário ou livro não encontrado.")
        return

    if isbn_livro not in emprestimos_ativos or emprestimos_ativos[isbn_livro] != matricula_usuario:
        print(f"O livro '{livro['titulo']}' não está emprestado para este usuário.")
        return

    # Atualizando dados
    livro["disponivel"] = True
    del emprestimos_ativos[isbn_livro]

    print(f"Livro '{livro['titulo']}' devolvido por {usuario['tipo']} {matricula_usuario}")


# Impressão inicial:

print("--- Listas Iniciais ---")
print("Usuários:", usuarios)
print("Livros:", livros)
print("Bibliotecários:", bibliotecarios)


# Simulação dos eventos:

print("\n--- Início da Simulação da Biblioteca ---")
emprestar_livro("A001", "12345")   # Aluno A001 pega Python
emprestar_livro("P001", "67890")   # Professor P001 pega Modelagem
emprestar_livro("A001", "67890")   # Aluno A001 tenta pegar Modelagem
devolver_livro("A001", "12345")    # Aluno A001 devolve Python
emprestar_livro("F001", "12345")   # Funcionário F001 pega Python


# Finalizando a simulação com os últimos dados:

print("\n--- Estado Final da Simulação ---")
print("Livros:")
for livro in livros:
    status = "Disponível" if livro["disponivel"] else "Emprestado"
    print(f"- {livro['titulo']} (ISBN: {livro['isbn']}): {status}")

print("\nUsuários e seus históricos de empréstimos:")
for usuario in usuarios:
    print(f"- {usuario['tipo']} {usuario['matricula']}: Empréstimos: {usuario['historico_emprestimos']}")

print("\nEmpréstimos Ativos:")
for isbn, matricula in emprestimos_ativos.items():
    livro = encontrar_livro(isbn)
    usuario = encontrar_usuario(matricula)
    print(f"- Livro: '{livro['titulo']}' (ISBN: {isbn}) emprestado para {usuario['tipo']} (Matrícula: {matricula})")

print("\nSimulação finalizada.")